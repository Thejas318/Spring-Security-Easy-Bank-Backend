package com.project.easybankbackendapp.filter;

import com.project.easybankbackendapp.constants.SecurityConstants;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import javax.crypto.SecretKey;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.*;

@Slf4j
public class JWTTokenGenerationFilter extends OncePerRequestFilter {
    /**
     * Same contract as for {@code doFilter}, but guaranteed to be
     * just invoked once per request within a single request thread.
     * See {@link #shouldNotFilterAsyncDispatch()} for details.
     * <p>Provides HttpServletRequest and HttpServletResponse arguments instead of the
     * default ServletRequest and ServletResponse ones.
     *
     * @param request
     * @param response
     * @param filterChain
     */
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        if(authentication != null){
            SecretKey secretKey = Keys.hmacShaKeyFor(SecurityConstants.JWT_KEY.getBytes(StandardCharsets.UTF_8));
            log.info("The secret Key generated by Secret Key Generator: {}", secretKey.toString());

            String jwt = Jwts.builder().issuer("EASY BANk BY THEJAS").subject("JWT TOKEN")
                    .claim("username", authentication.getName())
                    .claim("authorities", getAuthorities(authentication.getAuthorities()))
                    .issuedAt(new Date())
                    .expiration(new Date( new Date().getTime() + 30000000))
                    .signWith(secretKey).compact();
            log.info("The geerated JWT token is : {}", jwt);
            response.setHeader(SecurityConstants.JWT_HEADER, jwt);
        }
        filterChain.doFilter(request, response);
    }

    private Object getAuthorities(Collection<? extends GrantedAuthority> authorities) {
        Set<String> authoritySet = new HashSet<>();
        for(GrantedAuthority authority: authorities){
            authoritySet.add(authority.getAuthority());
        }
        log.info("String authorities: {}",String.join(",", authoritySet));
        return String.join(",", authoritySet);
    }

    //JWT will be generated only during login and filter will not be executed for any other requests
    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) {
        return !request.getServletPath().equals("/user");
    }
}
